// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  REQUESTER
  ACCOUNTING
  BUDGET
  TREASURY
  MAYOR
  ADMIN
  DEPARTMENT_HEAD
  FINANCE_HEAD
  GSO
  HR
  BAC
}

enum VoucherStatus {
  DRAFT
  PENDING
  VALIDATED
  APPROVED
  RELEASED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CASH
  CHECK
  E_TRANSFER
}

enum CanvasItemType {
  VOUCHER
  ITEM
  NOTE
  ATTACHMENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  role      UserRole @default(REQUESTER)
  department String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdVouchers     DisbursementVoucher[] @relation("CreatedBy")
  assignedVouchers    DisbursementVoucher[] @relation("AssignedTo")
  uploadedAttachments Attachment[]
  approvals           Approval[]
  auditTrails         AuditTrail[]
  notifications       Notification[]
  bacReviews          BacReview[]
  accounts            Account[]
  sessions            Session[]
  canvasItems         CanvasItem[]

  @@map("users")
}

model DisbursementVoucher {
  id          String        @id @default(cuid())
  payee       String
  address     String
  amount      Decimal       @db.Decimal(15, 2)
  particulars String
  tags        String[]
  sourceOffice String[]
  status      VoucherStatus @default(DRAFT)
  remarks     String?
  paymentMethod PaymentMethod?
  checkNumber String?
  releaseDate DateTime?
  
  createdById  String
  assignedToId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdBy     User                @relation("CreatedBy", fields: [createdById], references: [id])
  assignedTo    User?               @relation("AssignedTo", fields: [assignedToId], references: [id])
  items         DisbursementItem[]
  attachments   Attachment[]
  approvals     Approval[]
  auditTrails   AuditTrail[]
  notifications Notification[]
  bacReviews    BacReview[]
  canvasItems   CanvasItem[]

  @@map("disbursement_vouchers")
}

model DisbursementItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  unit        String
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(12, 2)
  
  disbursementVoucherId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  disbursementVoucher DisbursementVoucher @relation(fields: [disbursementVoucherId], references: [id], onDelete: Cascade)
  canvasItems         CanvasItem[]

  @@map("disbursement_items")
}

model Attachment {
  id       String @id @default(cuid())
  fileName String
  fileUrl  String
  fileSize Int?
  mimeType String?
  
  uploadedById          String
  disbursementVoucherId String
  
  createdAt DateTime @default(now())

  // Relations
  uploadedBy          User                @relation(fields: [uploadedById], references: [id])
  disbursementVoucher DisbursementVoucher @relation(fields: [disbursementVoucherId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Approval {
  id       String         @id @default(cuid())
  status   ApprovalStatus @default(PENDING)
  remarks  String?
  level    Int            @default(1) // 1: Department Head, 2: Finance Head, 3: Mayor
  
  approverId            String
  disbursementVoucherId String
  
  createdAt  DateTime  @default(now())
  approvedAt DateTime?

  // Relations
  approver            User                @relation(fields: [approverId], references: [id])
  disbursementVoucher DisbursementVoucher @relation(fields: [disbursementVoucherId], references: [id], onDelete: Cascade)

  @@unique([approverId, disbursementVoucherId, level])
  @@map("approvals")
}

model AuditTrail {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE, APPROVE, REJECT, etc.
  entityType String   // DisbursementVoucher, User, etc.
  entityId   String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  
  userId String
  disbursementVoucherId String?
  
  timestamp DateTime @default(now())

  // Relations
  user                User                 @relation(fields: [userId], references: [id])
  disbursementVoucher DisbursementVoucher? @relation(fields: [disbursementVoucherId], references: [id], onDelete: SetNull)

  @@map("audit_trails")
}

model Notification {
  id      String @id @default(cuid())
  type    String // "voucher_created", "approval_needed", etc.
  title   String
  message String
  isRead  Boolean @default(false)
  priority String @default("medium") // "high", "medium", "low"
  
  userId String
  disbursementVoucherId String?
  
  createdAt DateTime @default(now())
  
  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  disbursementVoucher DisbursementVoucher? @relation(fields: [disbursementVoucherId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model BacReview {
  id         String   @id @default(cuid())
  status     ApprovalStatus @default(PENDING)
  comments   String?
  
  reviewerId            String
  disbursementVoucherId String
  
  createdAt  DateTime  @default(now())
  reviewedAt DateTime?

  // Relations
  reviewer            User                @relation(fields: [reviewerId], references: [id])
  disbursementVoucher DisbursementVoucher @relation(fields: [disbursementVoucherId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, disbursementVoucherId])
  @@map("bac_reviews")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}